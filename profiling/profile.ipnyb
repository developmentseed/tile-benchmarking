{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e0e7aeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "## for profiling\n",
    "from profiler.main import profile\n",
    "\n",
    "# for titiler-xarray\n",
    "from typing import Any\n",
    "from titiler.xarray.factory import xarray_open_dataset, update_dataset\n",
    "import morecantile\n",
    "from rio_tiler.io import XarrayReader\n",
    "\n",
    "# for titiler-pgstac\n",
    "from titiler.pgstac.mosaic import PGSTACBackend\n",
    "from typing import Any, Dict, List, Tuple\n",
    "from rio_tiler.mosaic import mosaic_reader\n",
    "from rio_tiler.models import ImageData\n",
    "from geojson_pydantic import Polygon\n",
    "\n",
    "# Only if wanting to see a picture\n",
    "import io\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a53106ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "search_dict: Dict[str, Any] = {\n",
    "    'collections': [\"CMIP6_ensemble_median_TAS\"],\n",
    "    'datetime': \"1951-01-01T00:00:00Z\",\n",
    "    'bbox': [-180, -90, 180, 90]\n",
    "}\n",
    "\n",
    "xyz_tile = (0,0,0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6021ba14",
   "metadata": {},
   "source": [
    "## Profile titiler-xarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d60aad91",
   "metadata": {},
   "outputs": [],
   "source": [
    "@profile(add_to_return=True, cprofile=True, quiet=True, log_library='s3fs')\n",
    "def tile(src_path: str, x: int, y: int, z: int, *, variable: str, time_slice: str = None, **kwargs: Any):\n",
    "\n",
    "    with xarray_open_dataset(\n",
    "        src_path,\n",
    "        z=z,\n",
    "        decode_times=False,\n",
    "        **kwargs,\n",
    "    ) as dataset:\n",
    "        dataarray, _ = update_dataset(dataset, variable=variable, time_slice=time_slice)\n",
    "        \n",
    "        with XarrayReader(dataarray) as src_dst:\n",
    "            return src_dst.tile(x, y, z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "92cd9091",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening reference file\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/aimeebarciauskas/miniconda3/lib/python3.9/site-packages/titiler/xarray/factory.py:50: UserWarning: Variable(s) referenced in cell_measures not in variables: ['areacella']\n",
      "  return xarray.open_dataset(src_path, **xr_open_args)\n",
      "/Users/aimeebarciauskas/miniconda3/lib/python3.9/site-packages/xarray/core/indexes.py:224: FutureWarning: Passing method to Float64Index.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n",
      "  indexer = index.get_loc(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting up s3fs instance\n",
      "RC: caching enabled? False (explicit option is False)\n",
      "CALL: get_object - () - {'Bucket': 'climatedashboard-data', 'Key': 'cmip6/raw/monthly/CMIP6_ensemble_median/tas/tas_month_ensemble-median_historical_1950.nc', 'Range': 'bytes=21990-26789'}\n",
      "CALL: get_object - () - {'Bucket': 'climatedashboard-data', 'Key': 'cmip6/raw/monthly/CMIP6_ensemble_median/tas/tas_month_ensemble-median_historical_1950.nc', 'Range': 'bytes=10470-21989'}\n",
      "CALL: get_object - () - {'Bucket': 'climatedashboard-data', 'Key': 'cmip6/raw/monthly/CMIP6_ensemble_median/tas/tas_month_ensemble-median_historical_1950.nc', 'Range': 'bytes=45897-755594'}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'cprofile': ['   ncalls  tottime  percall  cumtime  percall filename:lineno(function)',\n",
       "  \"       79    1.525    0.019    1.525    0.019 {method 'acquire' of '_thread.lock' objects}\",\n",
       "  '        1    0.028    0.028    0.029    0.029 {rasterio._warp._reproject}',\n",
       "  '        4    0.011    0.003    0.024    0.006 core.py:1865(_process_chunk)',\n",
       "  '        1    0.009    0.009    0.009    0.009 {built-in method zlib.decompress}',\n",
       "  '        9    0.006    0.001    0.006    0.001 crs.py:161(__init__)',\n",
       "  '        6    0.006    0.001    0.006    0.001 crs.py:964(geodetic_crs)',\n",
       "  \"        2    0.004    0.002    0.005    0.002 {method 'start' of 'rasterio._env.GDALEnv' objects}\",\n",
       "  '        1    0.004    0.004    0.004    0.004 {built-in method numcodecs._shuffle._doUnshuffle}',\n",
       "  '        2    0.004    0.002    0.004    0.002 {rasterio._warp._transform_bounds}',\n",
       "  '10365/9985    0.002    0.000    0.004    0.000 {built-in method builtins.isinstance}',\n",
       "  \"       25    0.002    0.000    0.002    0.000 {method 'send' of '_socket.socket' objects}\",\n",
       "  '        2    0.001    0.001    0.556    0.278 variables.py:133(_apply_mask)',\n",
       "  '4883/4124    0.001    0.000    0.001    0.000 {built-in method builtins.len}',\n",
       "  '       59    0.001    0.000    0.002    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}',\n",
       "  '  209/149    0.001    0.000    0.001    0.000 indexing.py:407(shape)',\n",
       "  '      184    0.001    0.000    0.003    0.000 indexes.py:251(__getitem__)',\n",
       "  '      304    0.001    0.000    0.002    0.000 variable.py:190(as_compatible_data)',\n",
       "  \"        9    0.001    0.000    0.001    0.000 {method 'to_wkt' of 'pyproj._crs.Base' objects}\",\n",
       "  '        3    0.001    0.000    0.019    0.006 rioxarray.py:437(write_crs)',\n",
       "  '      187    0.001    0.000    0.004    0.000 variable.py:583(_broadcast_indexes)',\n",
       "  '       91    0.001    0.000    0.013    0.000 dataarray.py:1123(isel)',\n",
       "  '      157    0.001    0.000    0.007    0.000 dataarray.py:732(_getitem_coord)',\n",
       "  '     1031    0.001    0.000    0.003    0.000 utils.py:559(ndim)',\n",
       "  '      129    0.001    0.000    0.004    0.000 dataarray.py:443(_replace_maybe_drop_dims)',\n",
       "  \"        1    0.001    0.001    0.001    0.001 {method 'readlines' of '_io._IOBase' objects}\",\n",
       "  '      282    0.001    0.000    0.001    0.000 indexing.py:21(expanded_indexer)',\n",
       "  '      187    0.001    0.000    0.012    0.000 variable.py:1123(isel)',\n",
       "  '      301    0.001    0.000    0.004    0.000 variable.py:291(__init__)',\n",
       "  '        5    0.001    0.000    0.001    0.000 {rasterio.crs.from_wkt}',\n",
       "  '      235    0.001    0.000    0.002    0.000 dataarray.py:371(__init__)',\n",
       "  '1288/1286    0.001    0.000    0.001    0.000 common.py:261(__setattr__)',\n",
       "  '     1057    0.001    0.000    0.003    0.000 variable.py:324(shape)',\n",
       "  '      141    0.001    0.000    0.003    0.000 base.py:1852(set_names)']}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_and_assets, logs = tile(\n",
    "    \"titiler-xarray/combined_cmip6_kerchunk.json\", \n",
    "    *xyz_tile,\n",
    "    time_slice = search_dict['datetime'],\n",
    "    reference=True,\n",
    "    variable=\"tas\",\n",
    ")\n",
    "logs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "88451037",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/aimeebarciauskas/miniconda3/lib/python3.9/site-packages/rio_tiler/models.py:648: InvalidDatatypeWarning: Invalid type: `float32` for the `PNG` driver. Data will be rescaled using min/max type bounds or dataset_statistics.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAQAAAD2e2DtAAAN40lEQVR4nO2d7ZLrKA6GPV1z3y5f+e6PDOFLgMCSEJGerZ3T3XFsjF6EEHLyz/W/yzHM3+4GOHtxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxvl3dwMouZOfn22tOIt/zk8F381XXARjfAowjsIpYMaRt0e/g0PVFDDjzLGm92mgj08BxlEkgN6YXnf1Pkn0UREDYIx0/+fMP8e6Y6dCgQfAj9H7e+zcuHYv0EaBAJydbJ4CZsbmm3Ec3isxddxHTVBHeICHrEv5J4M4SZ0x8Wz0AFIdJGeIaHw6yXKzzQPgo/mHcDRJmeVO/js+8t7oLw6YAui6Ztb8uCvfoAFbJi3/+jRfkeEAATicbBbASPX6Z9LeHUCt13ZHmwRQdxt/x6xMAKV7b7f7KV7Dh4GSS9SaDQLAzY3XRdslc+eCZ/DxbkWUwzx7AkEVewE9nmvHQg4GNmvYo3g6x+hlyxSAy5XtG/+SV9idLhIUwH3h1/67lke9MS5zRWlBCHuAKIF+p4ZXqebF1bM8STDHZZoyXJSVgIAA7uo37C3Ku8c6ndN6hZZcZJL3zSyAdj7sHkTMtOlfrBNvH8ed3X+yK8hJgFUAebCHd6W0Xf2uMyVMAaWHpSTAWhWcpjju5LaeKw0H4eQKdQfMiCq27p5853kweoBysRe69an+lvMAx/0y2G0kHpgEUC/58jTJ2Lh3JaA3rJ6JW4T1Xd7fv8vAIoC0dPMBHf44upbNANbXfpPUjYwM+Xx7BTpS4v5F8wD3d4Ml/N7j/Cngffi5coa59zAIIA/9Zrd5dJj9bStWjAdXPs1LYK7t5AIonXuI/nsbqeF/rSNOY87891VOixTXw56NaRl4V/vj9az+JL4Ctye+ntCVJLaydd38KacRM33yJOfG3TVTDFCbP/w9AgWCPGGPZDA5Nn88kkeYM1tu7I+Ht7qjbRIeHyBdD4xZ5uLAtDv3n3PJK8YgMFDP7+3iCS4zrVXoyLyH4oxpH8+l0IgrgtJwprUJk8cBEqxdZb1tkp9r8vYhFNZU8OivMf6V3wblAO/WsUary0Wg0Bp+BQdrTeCdNO+6Wi4/Nf5oBm0Fl5qoW5+He1inHhZ35QoJ6qP1XmGvByjHPHQEJ9KbSlTuH+6p1tnX75I9FRwlgB8FtHOkFK0r3cX/31yh/f578HoLUgGMzZoXiEiMTU3ZxLkV+vyZPz/NyeCPcoQEk/ZuMR7RuzLddqiUB+iN//x1mhZFn/JuB+GPxx2Pan4xZ9Uf7qW0Kht7r76/3ts+uq9/e43DReY5lAlQ6NgH3GdotQU6bi4Fi0/thrh9lPugYXRGbLs7qeBxNr88/il+a5+h3DJuAy2q5lgffa019+g984s+XnrtbuYB+nNaWsCcGjp9dWz+8BfOTqIzPy7LnpeSajB/StnzHQ+AaXrPdO3xfxevp9XC0HXrbBheNKvm750d9knQkNCYtirbBK4CsDF4P47H/j1PFJXdC0UBO83f653ylVQYWpajZduBVQC1atPK4H6sjJ3xcd6Js8vj4u6+giRjyNzPferi77qgmYGSPElR/5V67wy/1fKG3Mjazdzmv0wgrwT6QJ23vtVBUc45A/Z6WiXyTQXnKt45Y0HjV6778IFbcPm4CUkr2TIwfX5PHorVM7RiaL+6eo2wDsG3Uuv4BzaDtDV1xmh98+PABpja+mmVv7yabI+zysf+XQRYuFZxPVcATUe/Yvzr+nqAfJtWuowi3XOAXh3nBlrM3gU2+fsrEnjiFJCafLypS9uIQMifzctvzUOUrOYcTqZIBc89s0JBuF6seMtr3+IxOfThHZSE/nXzV0HgHvPnMXXIpfE5eojxHsRvsvWTQsvII40GYr17f1OJht8f6fCzmlsFAI0wKA+xZyT+xviPE2xrypwsCpXMsY/KG2W2e36BtvlBAfRX3ty5gqf6rScDqtbAYeb6qkQHUDhd3guyJCw+dw6//qZ5vbPm9TWctLakTvIEtcMvy+9qho+H995OLYFeuSelBKB7CjLLXzvP/DVlEV/OqwdDqMeldCo693HleO93nDZa/nQk4YEAwrjg6YaZp1gkxmL+qPVJPmDdPh0B3IPZ492F0+vAP/PRrtM7c6PnjRWaAogRMN/F47UwXyZBZ5q7+LfmFMd/Xbi2to9pCCCUOkryyf+tVBq/u2ZNWHye4Q1mylLqY6tVwPyiC/+o1gjcsoum6q9cYJ5h7DbQQh0TyFYeYG0rlsZXSFbX5R9Lc7r5e/QrLL9VwW+6gH525rvWr5p6tXKa8HMCpbqWzgf8Eq0pYNRbR315NGVGIoS5J8X7s2AehCf9pFCOMRU+DyBNy7gPqHmu+fD9uog9AMdoSk1OWwLyS+b/sNL/R00BAQrT/ZbrX78b8g+L5hlXcIjzlvXnj3R5j7KwdoZDPACXrFaO1+o7yvJ6HIcIQDJaH9dCaRz/aUprpq9UTwFvXFuP8HBn7spjIhpy8dT1UFSUqezZviIWAG23cFUhtK4TJIGrTdYggdz8K/1FXBauLTyC6LcxPKICb0ylHb33Xktjrw4Wli+MoEBqzq+vU37gY/zg9sAuw/cktzpREgeBVGbbW/EvXZuII8310bXukFWADJprAz6ihFv4pr3kAuB6TIOOB/w5rwBKxxnX17vN0a5Qerc/svXh0F2UzwOkv+Xu/0n+Ejal9vkH6DmKtzAI4ISVAL6FMQm92w9wPJrD+MWR63l2fvrLwDfv5gX2XO96TNkUsNv8ZSpV5rnEeVbzfjWMXx07P1/KdDWuTWUiKH464E7opcn63cFYCTwvI9k59Ecobeh7SOB7A2Geb0VeXOHymSbulPGUrWmcJnCwJ4LgrikfwZRpBZcDv4VyBRzXYA0C4+oZdzS3c6YqJWs/UEZ1FTlEUsEzyuWeBrjOEp9sTCc2SngGCGsQ+AH6DPJ+1/A4VMqdSnwmgeqqq2XfIwQEEOinLvKVLU8VEBXjgLWdbF69HtewGMQAdBfN99Pr9eyT/f5cXDcsQavGAD6uJZCyEpqnNwYxAN3iDHaMcHkW13KNCvzo//zeN91oncQLIgjkKfJoGzl+HYNmEbztlb4sVgfe/HsEY4APbVfYf9fbDqcWU8tErXb2g+BxFfLnqOMygTXQV8yPn9PbnYOvgUyGzQhCR40lwdMD4h4gRW5pyC0fTNvGO3j9UnSeZeDWmkC55/M5r0J5DxxxQR8FRaHwTd9FIKhzSdgq04SP7TPaEeUJjFUUhJQzfLlIpNgs5hk/PHuLUOUB3Xc65pOpAg9wXenqXyr4oQYvz3biJ//5AV99Hw7n51UigLD676mcKqW6D2zM0zuGejioEcB1jXfQ9EqA5rytr6PNP7WZ9h62LgNhcEVkb89f7ja8EReFSdJ5v7WfeFxBCB9vsgJwNVJ/Y0YGqS/MSFE1BVzXbhOsQOX+ofin/zgYBZs9QDmSTzM/5bi8k59gMYRrUvbSdg+wejMcH+c+ez7qkq+41GufPZa33iTb5psFkC+L5m+GVgS7l4kxEmnfVaxAjiW3ebHNHKpWAe+MSWM+bBu4xJKvA1rf+QnlCssdVlwLf0gAdMux9WtR7Ni3dv1aCXFYINh2bI8BKKGq+9/17nAOOCGU5xHj1hBUaYVZ1H5eVSWA/XOwFj7zewx081m+Zfz03Z9/x+XrgylAvjJ3fxyAa4Fsv9xJVNCeIJ7s39E7PnS/O5izRqd91nWo2qNRAjP9XZq8905VQeCHVQnQGUSnAHLi+iBdMcyjKgbQgUw59ntWsiY1CgWwNrJ2jkdZ87fTRCvt+AoA82apGz3JmNJfPQOtCsq/tIBWBX/4ost0i4K/zFr3kjC0T7pkdbQ3WFZTlpQ5g1tjEBiZkZlkCFiXkcgIgKJUpgwVv98cun5Ja+zyTThbjKaksvXdIHC8sNAiEEqjzJ+LprCszezWd3uiAGKAzz/9lGIbHTO1jlZcF09LqEQFF5QqXAbOoT1c3ANeNEQC2DMV7DD+KXsj2PcR1QRaGYXlfZ5/34qngH0BpiazcrdFsQBGcHaNJglQ0lwFnMcOE+2RBe8S91gBcPOrPqDk0EfDfj/6b4MrpD+yKHR3SbamK7agbonizSBIDuWnZ9qgV9UHDxr8lpAqD5Ai/ZSsZnoJr7VPDIiVAWoFAKNl80kT74aE0inAx/8ssx8jEQpKla4C+s+9OTWr/aN0CnBXvw6+757rkDyAj34s2Kqh6wq9qtQD5Lg/mAFXxZUtA/V18NP5zWmDqe3OjztiFeACoKL+jAH1MYAbn45DHg3TOCX9BtCHT6mcAnwCkEOlB3DkUC+A88e/7glNuQDON7/2e1AugIj0Y9hWOEYA16XdmZ6JylWA/HP3dlHuAXzMc6PUA1xXbnxskYN7jFkUC6D96bgOHaoF4PCjPAZwuHEBGOeHBeArCAweAxjnhz2Ag8EFYBwXgHFcAMZxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxnEBGMcFYBwXgHFcAMZxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxnEBGMcFYBwXgHFcAMZxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxnEBGMcFYBwXgHFcAMZxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxnEBGMcFYBwXgHFcAMZxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxnEBGMcFYBwXgHFcAMZxARjHBWAcF4BxXADGcQEYxwVgHBeAcVwAxnEBGMcFYBwXgHH+DxSXpldj+YNKAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<PIL.PngImagePlugin.PngImageFile image mode=LA size=256x256>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "content = image_and_assets.render(\n",
    "    img_format='PNG'\n",
    ")\n",
    "\n",
    "im = Image.open(io.BytesIO(content))\n",
    "im"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a131851",
   "metadata": {},
   "source": [
    "## Profile titiler-pgstac"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "045ea6a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tile_pgstac\n",
    "\n",
    "@profile(add_to_return=True, cprofile=True, quiet=True, log_library = 'rasterio')\n",
    "def tile(\n",
    "    tile_x: int,\n",
    "    tile_y: int,\n",
    "    tile_z: int,\n",
    ") -> Tuple[ImageData, List[str]]:\n",
    "    \n",
    "    pool = tile_pgstac.connection_pool()\n",
    "    backend = PGSTACBackend(pool=pool, input=tile_pgstac.mosaic_id(search_dict=search_dict, pool=pool))\n",
    "    bbox = backend.tms.bounds(morecantile.Tile(tile_x, tile_y, tile_z))\n",
    "    mosaic_assets = backend.get_assets(Polygon.from_bounds(*bbox))    \n",
    "\n",
    "    def _reader(\n",
    "        item: Dict[str, Any], x: int, y: int, z: int, **kwargs: Any\n",
    "    ) -> ImageData:\n",
    "        with backend.reader(item, tms=backend.tms, **backend.reader_options) as src_dst:\n",
    "            return src_dst.tile(x, y, z, **kwargs)\n",
    "\n",
    "    return mosaic_reader(mosaic_assets, _reader, tile_x, tile_y, tile_z, threads=10, **{\"assets\": [\"data\"]})  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ed8b8d9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matched. confidence=100, c_code=b'3857', c_name=b'EPSG'\n",
      "Entering env context: <rasterio.env.Env object at 0x148e58ee0>\n",
      "Starting outermost env\n",
      "No GDAL environment exists\n",
      "New GDAL environment <rasterio._env.GDALEnv object at 0x148e58fa0> created\n",
      "GDAL_DATA found in environment.\n",
      "PROJ_LIB found in environment.\n",
      "Started GDALEnv: self=<rasterio._env.GDALEnv object at 0x148e58fa0>.\n",
      "Entered env context: <rasterio.env.Env object at 0x148e58ee0>\n",
      "Got a copy of environment <rasterio._env.GDALEnv object at 0x148e58fa0> options\n",
      "Entering env context: <rasterio.env.Env object at 0x148f09370>\n",
      "Got a copy of environment <rasterio._env.GDALEnv object at 0x148e58fa0> options\n",
      "Entered env context: <rasterio.env.Env object at 0x148f09370>\n",
      "Sharing flag: 0\n",
      "Nodata success: 1, Nodata value: nan\n",
      "Dataset <open DatasetReader name='s3://climatedashboard-data/cmip6/monthly/CMIP6_ensemble_median/tas/tas_month_ensemble-median_historical_195101.tif' mode='r'> is started.\n",
      "Exiting env context: <rasterio.env.Env object at 0x148f09370>\n",
      "Cleared existing <rasterio._env.GDALEnv object at 0x148e58fa0> options\n",
      "Stopped GDALEnv <rasterio._env.GDALEnv object at 0x148e58fa0>.\n",
      "No GDAL environment exists\n",
      "New GDAL environment <rasterio._env.GDALEnv object at 0x148e58fa0> created\n",
      "GDAL_DATA found in environment.\n",
      "PROJ_LIB found in environment.\n",
      "Started GDALEnv: self=<rasterio._env.GDALEnv object at 0x148e58fa0>.\n",
      "Exited env context: <rasterio.env.Env object at 0x148f09370>\n",
      "Matched. confidence=100, c_code=b'3857', c_name=b'EPSG'\n",
      "Matched. confidence=100, c_code=b'4326', c_name=b'EPSG'\n",
      "Matched. confidence=100, c_code=b'3857', c_name=b'EPSG'\n",
      "Created exact transformer\n",
      "Exported CRS to WKT.\n",
      "Warp_extras: {'init_dest': 'NO_DATA'}\n",
      "Nodata success: 1, Nodata value: nan\n",
      "Dataset <closed WarpedVRT name='WarpedVRT(s3://climatedashboard-data/cmip6/monthly/CMIP6_ensemble_median/tas/tas_month_ensemble-median_historical_195101.tif)' mode='r'> is started.\n",
      "Output nodata value read from file: nan\n",
      "Output nodata values: [nan]\n",
      "all_valid: False\n",
      "mask_flags: ([<MaskFlags.nodata: 8>],)\n",
      "Jump straight to _read()\n",
      "Window: None\n",
      "IO window xoff=0.0 yoff=0.0 width=256.0 height=256.0\n",
      "IO window xoff=0.0 yoff=0.0 width=256.0 height=256.0\n",
      "Exiting env context: <rasterio.env.Env object at 0x148e58ee0>\n",
      "Cleared existing <rasterio._env.GDALEnv object at 0x148e58fa0> options\n",
      "Stopped GDALEnv <rasterio._env.GDALEnv object at 0x148e58fa0>.\n",
      "Exiting outermost env\n",
      "Exited env context: <rasterio.env.Env object at 0x148e58ee0>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'cprofile': ['   ncalls  tottime  percall  cumtime  percall filename:lineno(function)',\n",
       "  \"       36    4.379    0.122    4.379    0.122 {method 'acquire' of '_thread.lock' objects}\",\n",
       "  \"       18    0.086    0.005    0.086    0.005 {method 'control' of 'select.kqueue' objects}\",\n",
       "  '        8    0.002    0.000    0.002    0.000 connection.py:410(_exec_command)',\n",
       "  '        2    0.001    0.000    0.001    0.000 core.py:3435(__setmask__)',\n",
       "  '        1    0.001    0.001    4.474    4.474 3069477002.py:3(tile)']}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_and_assets, logs = tile(*xyz_tile)\n",
    "logs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51dc2c6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/aimeebarciauskas/miniconda3/lib/python3.9/site-packages/rio_tiler/models.py:648: InvalidDatatypeWarning: Invalid type: `float64` for the `PNG` driver. Data will be rescaled using min/max type bounds or dataset_statistics.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<PIL.PngImagePlugin.PngImageFile image mode=LA size=256x256>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "content = image_and_assets[0].render(\n",
    "    img_format='PNG'\n",
    ")\n",
    "\n",
    "im = Image.open(io.BytesIO(content))\n",
    "im"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
